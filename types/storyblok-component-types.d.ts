// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from "storyblok";
export interface AtomIconTitlePairStoryblok {
  name: string;
  icon: string;
  iconSize?: string;
  component: "atomIconTitlePair";
  _uid: string;
  [k: string]: any;
}

export type MultilinkStoryblok =
  | {
      id?: string;
      cached_url?: string;
      anchor?: string;
      linktype?: "story";
      target?: "_self" | "_blank";
      story?: {
        name: string;
        created_at?: string;
        published_at?: string;
        id: number;
        uuid: string;
        content?: {
          [k: string]: any;
        };
        slug: string;
        full_slug: string;
        sort_by_date?: null | string;
        position?: number;
        tag_list?: string[];
        is_startpage?: boolean;
        parent_id?: null | number;
        meta_data?: null | {
          [k: string]: any;
        };
        group_id?: string;
        first_published_at?: string;
        release_id?: null | number;
        lang?: string;
        path?: null | string;
        alternates?: any[];
        default_full_slug?: null | string;
        translated_slugs?: null | any[];
        [k: string]: any;
      };
      [k: string]: any;
    }
  | {
      url?: string;
      cached_url?: string;
      anchor?: string;
      linktype?: "asset" | "url";
      target?: "_self" | "_blank";
      [k: string]: any;
    }
  | {
      email?: string;
      linktype?: "email";
      target?: "_self" | "_blank";
      [k: string]: any;
    };

export interface AtomSingleButtonLinkStoryblok {
  link?: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  displayText?: string;
  buttonStyle?: number | string;
  launchInductionModal?: boolean;
  component: "atomSingleButtonLink";
  _uid: string;
  [k: string]: any;
}

export interface AssetStoryblok {
  alt?: string;
  copyright?: string;
  id: number;
  filename: string;
  name: string;
  title?: string;
  focus?: string;
  [k: string]: any;
}

export interface AtomSingleCardStoryblok {
  media?: AssetStoryblok;
  pill: string;
  content?: (
    | CardContentListItemsStoryblok
    | CardContentTextAreaStoryblok
    | CardContentTextPairStoryblok
    | CardContentTextTitleStoryblok
  )[];
  component: "atomSingleCard";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleLinkStoryblok {
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  displayText?: string;
  component: "atomSingleLink";
  _uid: string;
  [k: string]: any;
}

export interface CardContentListItemsStoryblok {
  items: AtomIconTitlePairStoryblok[];
  component: "cardContentListItems";
  _uid: string;
  [k: string]: any;
}

export interface CardContentTextAreaStoryblok {
  textarea?: string;
  component: "cardContentTextArea";
  _uid: string;
  [k: string]: any;
}

export interface CardContentTextPairStoryblok {
  bold?: string;
  standard?: string;
  component: "cardContentTextPair";
  _uid: string;
  [k: string]: any;
}

export interface CardContentTextTitleStoryblok {
  title?: string;
  component: "cardContentTextTitle";
  _uid: string;
  [k: string]: any;
}

export type MultiassetStoryblok = {
  alt?: string;
  copyright?: string;
  id: number;
  filename: string;
  name: string;
  title?: string;
  [k: string]: any;
}[];

export interface ContentMultiMediaStoryblok {
  media: MultiassetStoryblok;
  component: "contentMultiMedia";
  _uid: string;
  [k: string]: any;
}

export interface RichtextStoryblok {
  type: string;
  content?: RichtextStoryblok[];
  marks?: RichtextStoryblok[];
  attrs?: any;
  text?: string;
  [k: string]: any;
}

export interface ContentRichTextStoryblok {
  richText: RichtextStoryblok;
  component: "contentRichText";
  _uid: string;
  [k: string]: any;
}

export interface ContentSingleButtonsStoryblok {
  links?: AtomSingleButtonLinkStoryblok[];
  component: "contentSingleButtons";
  _uid: string;
  [k: string]: any;
}

export interface ContentWhyChooseUsStoryblok {
  component: "contentWhyChooseUs";
  _uid: string;
  [k: string]: any;
}

export interface DataDiscountedParkingOptionStoryblok {
  time?: string;
  cost?: string;
  component: "dataDiscountedParkingOption";
  _uid: string;
  [k: string]: any;
}

export interface MetaSiteOptionsStoryblok {
  enableStudentOffer?: boolean;
  topBarText: string;
  topBarTextAdded?: string;
  topBarButtonText: string;
  modalTitle?: string;
  modalPrice?: string;
  modalText?: string;
  modalList?: AtomIconTitlePairStoryblok[];
  telephone?: string;
  email?: string;
  discountedParking?: DataDiscountedParkingOptionStoryblok[];
  membershipsFrom?: string;
  navigation?: AtomSingleLinkStoryblok[];
  defaultWhy: AtomIconTitlePairStoryblok[];
  inductionModalTitle: string;
  inductionModalText: string;
  component: "metaSiteOptions";
  _uid: string;
  [k: string]: any;
}

export interface SectionCardBlockStoryblok {
  title?: string;
  titleLevel: number | string;
  cards?: AtomSingleCardStoryblok[];
  backgroundStyle: number | string;
  component: "sectionCardBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionGoogleReviewsStoryblok {
  component: "sectionGoogleReviews";
  _uid: string;
  [k: string]: any;
}

export interface SectionInsetColumnMixedContentStoryblok {
  mixedBlockPrimary: (
    | ContentMultiMediaStoryblok
    | ContentRichTextStoryblok
    | ContentSingleButtonsStoryblok
    | ContentWhyChooseUsStoryblok
  )[];
  mixedBlockSecondary: (
    | ContentMultiMediaStoryblok
    | ContentRichTextStoryblok
    | ContentSingleButtonsStoryblok
    | ContentWhyChooseUsStoryblok
  )[];
  backgroundStyle: number | string;
  component: "sectionInsetColumnMixedContent";
  _uid: string;
  [k: string]: any;
}

export interface SectionRichTextOnlyStoryblok {
  content: RichtextStoryblok;
  component: "sectionRichTextOnly";
  _uid: string;
  [k: string]: any;
}

export interface SectionSingleNoticeStoryblok {
  notice?: string;
  buttons?: ContentSingleButtonsStoryblok[];
  component: "sectionSingleNotice";
  _uid: string;
  [k: string]: any;
}

export interface SectionSpacingBlockStoryblok {
  backgroundStyle: number | string;
  height: "" | "height-4" | "height-8" | "height-12" | "height-16" | "height-20";
  component: "sectionSpacingBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionTextWithImageStoryblok {
  block: (
    | ContentMultiMediaStoryblok
    | ContentRichTextStoryblok
    | ContentSingleButtonsStoryblok
    | ContentWhyChooseUsStoryblok
  )[];
  media: MultiassetStoryblok;
  backgroundStyle: number | string;
  component: "sectionTextWithImage";
  _uid: string;
  [k: string]: any;
}

export interface SectionTitleRowStoryblok {
  brow: string;
  browLevel: number | string;
  title: string;
  titleLevel: number | string;
  mixedContent: (
    | ContentMultiMediaStoryblok
    | ContentRichTextStoryblok
    | ContentSingleButtonsStoryblok
    | ContentWhyChooseUsStoryblok
  )[];
  backgroundStyle: number | string;
  component: "sectionTitleRow";
  _uid: string;
  [k: string]: any;
}

export interface TemplateHomepageStoryblok {
  brow?: string;
  primary?: string;
  secondary?: string;
  body?: (
    | SectionCardBlockStoryblok
    | SectionGoogleReviewsStoryblok
    | SectionInsetColumnMixedContentStoryblok
    | SectionRichTextOnlyStoryblok
    | SectionSingleNoticeStoryblok
    | SectionSpacingBlockStoryblok
    | SectionTextWithImageStoryblok
    | SectionTitleRowStoryblok
  )[];
  media: MultiassetStoryblok;
  component: "templateHomepage";
  _uid: string;
  [k: string]: any;
}

export interface TemplatePageStoryblok {
  brow?: string;
  primary?: string;
  primaryLevel: number | string;
  secondary?: string;
  media: MultiassetStoryblok;
  body?: (
    | SectionCardBlockStoryblok
    | SectionGoogleReviewsStoryblok
    | SectionInsetColumnMixedContentStoryblok
    | SectionRichTextOnlyStoryblok
    | SectionSingleNoticeStoryblok
    | SectionSpacingBlockStoryblok
    | SectionTextWithImageStoryblok
    | SectionTitleRowStoryblok
  )[];
  component: "templatePage";
  _uid: string;
  [k: string]: any;
}
